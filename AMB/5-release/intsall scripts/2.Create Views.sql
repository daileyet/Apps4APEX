CREATE OR REPLACE VIEW AMB_OBJECT_TYPE
AS
  SELECT 'Table' AS DISPLAY_NAME, 'TABLE' AS CODE, 1 AS SORT_KEY FROM dual
  UNION
  SELECT 'View', 'VIEW', 2 FROM dual
  UNION
  SELECT 'Index', 'INDEX', 3 FROM dual
  UNION
  SELECT 'Sequence', 'SEQUENCE', 4 FROM dual
  UNION
  SELECT 'Type', 'TYPE', 5 FROM dual
  UNION
  SELECT 'Type', 'TYPE BODY', 6 FROM dual
  UNION
  SELECT 'Package', 'PACKAGE', 7 FROM dual
  UNION
  SELECT 'Package', 'PACKAGE BODY', 8 FROM dual
  UNION
  SELECT 'Procedure', 'PROCEDURE', 9 FROM dual
  UNION
  SELECT 'Function', 'FUNCTION', 10 FROM dual
  UNION
  SELECT 'Trigger', 'TRIGGER', 11 FROM dual
  UNION
  SELECT 'Database Link', 'DATABASE LINK', 12 FROM dual
  UNION
  SELECT 'Materialized View', 'MATERIALIZED VIEW', 13 FROM dual
  UNION
  SELECT 'Synonym', 'SYNONYM', 14 FROM dual
/

CREATE OR REPLACE VIEW AMB_OBJ_LIST_VW
              AS
  SELECT NULL AS OBJECT_ID,
    AMB_OBJECT.VERSION_ID,
    AMB_OBJECT.TYPE AS NAME,
    NULL            AS TYPE,
    NULL            AS "REFERENCE",
    NULL            AS PARENT,
    AMB_OBJECT.TYPE AS SID
  FROM AMB_OBJECT
  GROUP BY AMB_OBJECT.VERSION_ID,
    AMB_OBJECT.TYPE
  UNION
  SELECT AMB_OBJECT.ID,
    AMB_OBJECT.VERSION_ID,
    AMB_OBJECT.NAME,
    AMB_OBJECT.TYPE,
    AMB_OBJECT."REFERENCE",
    AMB_OBJECT.TYPE AS PARENT,
    NULL            AS SID
  FROM AMB_OBJECT
/
CREATE OR REPLACE VIEW AMB_PROJ_VERSION_VW
AS
  SELECT AMB_VERSION.PROJECT_ID,
    AMB_PROJECT.NAME AS PROJECT_NAME,
    AMB_VERSION.ID   AS VERSION_ID,
    AMB_VERSION.APP_ID,
    AMB_VERSION.APP_NAME,
    AMB_VERSION.WORKSPACE,
    AMB_VERSION.ENVIRONMENT,
    AMB_VERSION.EDITION,
    AMB_VERSION.ACTIVE,
    AMB_VERSION.IS_BASE,
    AMB_PROJECT.DESCRIPTION AS PROJECT_DESC
  FROM AMB_PROJECT
  INNER JOIN AMB_VERSION
  ON AMB_PROJECT.ID = AMB_VERSION.PROJECT_ID
/

CREATE OR REPLACE VIEW AMB_IMPORT_VW
AS
  SELECT AMB_BEIL_LIST.ID,
    AMB_BEIL_LIST.VERSION_ID,
    AMB_BEIL_LIST.NAME,
    AMB_BEIL_LIST.TYPE,
    AMB_BEIL_LIST.NEED_IMPORT,
    AMB_BEIL_LIST.CONTENT,
    AMB_BEIL_LIST.CREATE_DATE,
    AMB_BEIL_LIST.CREATE_BY,
    AMB_BEIL_LIST.DESCRIPTION,
    AMB_OBJECT.ID AS ALREADY_ID,
    CASE
      WHEN AMB_OBJECT.ID IS NOT NULL
      THEN 'Y'
      ELSE 'N'
    END IS_ALREADY_EXIST,
    CASE
      WHEN AMB_OBJECT.ID IS NOT NULL
      THEN 'UPDATE'
      ELSE 'INSERT'
    END AS ACTION,
    AMB_OBJECT_TYPE.SORT_KEY,
    AMB_BEIL_LIST.IS_SUCCESS,
    AMB_BEIL_LIST.FAILED_MSG
  FROM AMB_BEIL_LIST
  LEFT JOIN AMB_OBJECT
  ON AMB_BEIL_LIST.VERSION_ID = AMB_OBJECT.VERSION_ID
  AND AMB_BEIL_LIST.NAME      = AMB_OBJECT.NAME
  AND AMB_BEIL_LIST.TYPE      = AMB_OBJECT.TYPE
  LEFT JOIN AMB_OBJECT_TYPE
  ON AMB_BEIL_LIST.TYPE = AMB_OBJECT_TYPE.CODE
/

CREATE OR REPLACE VIEW AMB_BUILD_VW
AS
  SELECT abl.ID,
    abl.VERSION_ID,
    abl.NAME,
    abl.TYPE,
    abl.CONTENT,
    abl.NEED_BUILD,
    CASE
      WHEN uo.OBJECT_ID IS NOT NULL
      THEN 'Y'
      ELSE 'N'
    END AS IS_ALREADY_EXIST,
    CASE
      WHEN uo.STATUS = 'VALID'
      THEN 'Y'
      WHEN uo.STATUS = 'INVALID'
      THEN 'N'
      ELSE ''
    END AS IS_VALID,
    CASE
      WHEN uo.OBJECT_ID IS NOT NULL
      THEN
        CASE
          WHEN uo.EDITIONABLE = 'Y'
          THEN 'REPLACE'
          ELSE 'MANUAL'
        END
      ELSE 'NEW'
    END AS ACTION,
    AMB_OBJECT_TYPE.SORT_KEY,
    abl.IS_SUCCESS,
    abl.FAILED_MSG
  FROM AMB_BEIL_LIST abl
  LEFT JOIN USER_OBJECTS uo
  ON abl.NAME  = uo.OBJECT_NAME
  AND abl.TYPE = uo.OBJECT_TYPE
  LEFT JOIN AMB_OBJECT_TYPE
  ON abl.TYPE = AMB_OBJECT_TYPE.CODE
/
CREATE OR REPLACE VIEW AMB_LOAD_VW
AS
  SELECT AMB_BEIL_LIST.ID,
    AMB_BEIL_LIST.VERSION_ID,
    AMB_BEIL_LIST.NAME,
    AMB_BEIL_LIST.TYPE,
    AMB_BEIL_LIST.NEED_LOAD,
    CASE
      WHEN AMB_OBJECT.ID IS NOT NULL
      THEN USER_OBJECTS.STATUS
        || '/UPDATE'
      ELSE USER_OBJECTS.STATUS
        || '/INSERT'
    END AS STATUS_ACTION,
    CASE
      WHEN AMB_OBJECT.ID IS NOT NULL
      THEN 'UPDATE'
      ELSE 'INSERT'
    END AS ACTION,
    AMB_OBJECT_TYPE.SORT_KEY,
    AMB_BEIL_LIST.CONTENT,
    AMB_OBJECT.CREATE_DATE,
    AMB_OBJECT.CREATE_BY,
    AMB_OBJECT.DESCRIPTION,
    AMB_BEIL_LIST.IS_SUCCESS,
    AMB_BEIL_LIST.FAILED_MSG
  FROM AMB_BEIL_LIST
  LEFT JOIN AMB_OBJECT_TYPE
  ON AMB_BEIL_LIST.TYPE = AMB_OBJECT_TYPE.CODE
  LEFT JOIN AMB_OBJECT
  ON AMB_BEIL_LIST.VERSION_ID = AMB_OBJECT.VERSION_ID
  AND AMB_BEIL_LIST.NAME      = AMB_OBJECT.NAME
  AND AMB_BEIL_LIST.TYPE      = AMB_OBJECT.TYPE
  LEFT JOIN USER_OBJECTS
  ON AMB_BEIL_LIST.NAME  = USER_OBJECTS.OBJECT_NAME
  AND AMB_BEIL_LIST.TYPE = USER_OBJECTS.OBJECT_TYPE
/

CREATE OR REPLACE VIEW AMB_EXPORT_VW
AS
  SELECT ael.ID,
    ael.VERSION_ID,
    ael.NAME,
    ael.TYPE,
    ael.NEED_EXPORT,
    ael.CONTENT AS CONTENT,
    AMB_OBJECT.CREATE_DATE,
    AMB_OBJECT.CREATE_BY,
    AMB_OBJECT.DESCRIPTION,
    aot.SORT_KEY,
    ael.IS_SUCCESS
  FROM AMB_BEIL_LIST ael
  LEFT JOIN AMB_OBJECT
  ON ael.ID = AMB_OBJECT.ID
  LEFT JOIN AMB_OBJECT_TYPE aot
  ON ael.TYPE = aot.CODE 
/
